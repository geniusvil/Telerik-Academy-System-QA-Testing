//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PerformanceTesting
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Microsoft.VisualStudio.TestTools.WebTesting;
    using Microsoft.VisualStudio.TestTools.WebTesting.Rules;


    [DeploymentItem("performancetesting\\DataUsers\\VioletaUsers3.csv")]
    [DataSource("v3", "Microsoft.VisualStudio.TestTools.DataSource.CSV", "|DataDirectory|\\VioletaUsers3.csv", Microsoft.VisualStudio.TestTools.WebTesting.DataBindingAccessMethod.Sequential, Microsoft.VisualStudio.TestTools.WebTesting.DataBindingSelectColumns.SelectOnlyBoundColumns, "VioletaUsers3#csv")]
    [DataBinding("v3", "VioletaUsers3#csv", "username", "v3.VioletaUsers3#csv.username")]
    [DataBinding("v3", "VioletaUsers3#csv", "email", "v3.VioletaUsers3#csv.email")]
    public class ApproveStudentApplicationCertificateCoded : WebTest
    {

        public ApproveStudentApplicationCertificateCoded()
        {
            this.PreAuthenticate = true;
            this.Proxy = "default";
        }

        public override IEnumerator<WebTestRequest> GetRequestEnumerator()
        {
            // Initialize validation rules that apply to all requests in the WebTest
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidateResponseUrl validationRule1 = new ValidateResponseUrl();
                this.ValidateResponse += new EventHandler<ValidationEventArgs>(validationRule1.Validate);
            }
            if ((this.Context.ValidationLevel >= Microsoft.VisualStudio.TestTools.WebTesting.ValidationLevel.Low))
            {
                ValidationRuleResponseTimeGoal validationRule2 = new ValidationRuleResponseTimeGoal();
                validationRule2.Tolerance = 0D;
                this.ValidateResponseOnPageComplete += new EventHandler<ValidationEventArgs>(validationRule2.Validate);
            }

            WebTestRequest request1 = new WebTestRequest("http://test.telerikacademy.com/");
            yield return request1;
            request1 = null;

            WebTestRequest request2 = new WebTestRequest("http://test.telerikacademy.com/Users/Auth/Login");
            request2.ThinkTime = 1;
            request2.Headers.Add(new WebTestRequestHeader("Referer", "http://test.telerikacademy.com/"));
            yield return request2;
            request2 = null;

            WebTestRequest request3 = new WebTestRequest("http://test.telerikacademy.com/Users/Auth/Login");
            request3.ThinkTime = 1;
            request3.Method = "POST";
            request3.ExpectedResponseUrl = "http://test.telerikacademy.com/";
            request3.Headers.Add(new WebTestRequestHeader("Referer", "http://test.telerikacademy.com/Users/Auth/Login"));
            FormPostHttpBody request3Body = new FormPostHttpBody();
            request3Body.FormPostParameters.Add("UsernameOrEmail", "AdminDummy");
            request3Body.FormPostParameters.Add("Password", "123456");
            request3.Body = request3Body;
            yield return request3;
            request3 = null;

            WebTestRequest request4 = new WebTestRequest("http://test.telerikacademy.com/Administration/Navigation");
            request4.Headers.Add(new WebTestRequestHeader("Referer", "http://test.telerikacademy.com/"));
            yield return request4;
            request4 = null;

            WebTestRequest request5 = new WebTestRequest("http://test.telerikacademy.com/Administration_Certificates/CertificateRequests");
            request5.Headers.Add(new WebTestRequestHeader("Referer", "http://test.telerikacademy.com/Administration/Navigation"));
            yield return request5;
            request5 = null;

            WebTestRequest request6 = new WebTestRequest("http://test.telerikacademy.com/Administration_Certificates/CertificateRequests/Li" +
                    "stOfUsers");
            request6.Headers.Add(new WebTestRequestHeader("Accept", "*/*"));
            request6.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request6.Headers.Add(new WebTestRequestHeader("Referer", "http://test.telerikacademy.com/Administration_Certificates/CertificateRequests"));
            request6.QueryStringParameters.Add("skip", "0", false, false);
            request6.QueryStringParameters.Add("page", "1", false, false);
            request6.QueryStringParameters.Add("filter%5Blogic%5D", "and", false, false);
            request6.QueryStringParameters.Add("filter%5Bfilters%5D%5B0%5D%5Bvalue%5D", "goshor1", false, false);
            request6.QueryStringParameters.Add("filter%5Bfilters%5D%5B0%5D%5Boperator%5D", "startwith", false, false);
            request6.QueryStringParameters.Add("filter%5Bfilters%5D%5B0%5D%5Bfield%5D", "Username", false, false);
            request6.QueryStringParameters.Add("filter%5Bfilters%5D%5B0%5D%5BignoreCase%5D", "true", false, false);
            yield return request6;
            request6 = null;

            WebTestRequest request7 = new WebTestRequest("http://test.telerikacademy.com/Administration_Certificates/CertificateRequests/Ce" +
                    "rtificateRequest_Read");
            request7.Method = "POST";
            request7.Headers.Add(new WebTestRequestHeader("Accept", "*/*"));
            request7.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request7.Headers.Add(new WebTestRequestHeader("Referer", "http://test.telerikacademy.com/Administration_Certificates/CertificateRequests"));
            FormPostHttpBody request7Body = new FormPostHttpBody();
            request7Body.FormPostParameters.Add("sort", "CertificateRequestId-desc");
            request7Body.FormPostParameters.Add("page", "1");
            request7Body.FormPostParameters.Add("pageSize", "25");
            request7Body.FormPostParameters.Add("group", "");
            request7Body.FormPostParameters.Add("filter", ("Username~eq~\'"
                            + (this.Context["v3.VioletaUsers3#csv.username"].ToString() + "\'")));
            request7.Body = request7Body;
            yield return request7;
            request7 = null;

            WebTestRequest request8 = new WebTestRequest("http://test.telerikacademy.com/Administration_Certificates/CertificateRequests/Ce" +
                    "rtificateRequest_Update");
            request8.Method = "POST";
            request8.Headers.Add(new WebTestRequestHeader("Accept", "*/*"));
            request8.Headers.Add(new WebTestRequestHeader("X-Requested-With", "XMLHttpRequest"));
            request8.Headers.Add(new WebTestRequestHeader("Referer", "http://test.telerikacademy.com/Administration_Certificates/CertificateRequests"));
            FormPostHttpBody request8Body = new FormPostHttpBody();
            request8Body.FormPostParameters.Add("sort", "");
            request8Body.FormPostParameters.Add("group", "");
            request8Body.FormPostParameters.Add("filter", "");
            request8Body.FormPostParameters.Add("CertificateRequestId", "5");
            request8Body.FormPostParameters.Add("CourseTrackId", "11");
            request8Body.FormPostParameters.Add("CourseTrackName", "QaVRedcurrant");
            request8Body.FormPostParameters.Add("CourseTrackNameEn", "QaVRedcurrant");
            request8Body.FormPostParameters.Add("CourseTrackUrl", "QaVRedcurrant");
            request8Body.FormPostParameters.Add("UserId", "");
            request8Body.FormPostParameters.Add("Username", this.Context["v3.VioletaUsers3#csv.username"].ToString());
            request8Body.FormPostParameters.Add("UserFullname", "Гошор Гошоров Гошоров");
            request8Body.FormPostParameters.Add("Email", this.Context["v3.VioletaUsers3#csv.email"].ToString());
            request8Body.FormPostParameters.Add("JudgmentUserId", "147");
            request8Body.FormPostParameters.Add("RequestInformation", @"{""CourseTrackId"":11,""Name"":""QaVRedcurrant"",""Description"":""QaVRedcurrant"",""UrlName"":null,""AlreadyApplied"":false,""ShortDescription"":""QaVRedcurrant"",""CoursesInTrack"":[],""RequiredCourses"":[],""CourseTrackTreeHeight"":1,""RequiredCoursesCount"":0,""OptionalCoursesCount"":0,""PassedCourses"":0,""NotFullyCoveredCourses"":0,""PassedBonusCoursesCount"":0,""BonusCoursesCount"":0,""CanApply"":false,""IsCourseTrackActiveForUser"":false,""ApprovedCertificate"":null,""JsonDataForTrackDisplay"":null}");
            request8Body.FormPostParameters.Add("IsApproved", "true");
            request8Body.FormPostParameters.Add("DateOfApplication", "11/11/2014 22:02:19");
            request8.Body = request8Body;
            yield return request8;
            request8 = null;

            WebTestRequest request9 = new WebTestRequest("http://test.telerikacademy.com/Users/Auth/LogOut");
            request9.ThinkTime = 1;
            request9.ExpectedResponseUrl = "http://test.telerikacademy.com/";
            request9.Headers.Add(new WebTestRequestHeader("Referer", "http://test.telerikacademy.com/Administration_Certificates/CertificateRequests"));
            yield return request9;
            request9 = null;
        }
    }
}
